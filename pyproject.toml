[tool.poetry]
name = "databricks-alembic"
version = "0.1.0"
description = ""
authors = ["Daan Rademaker <daanrademaker@royalfloraholland.com>"]
readme = "README.md"

[tool.poetry.scripts]
sample-databricks-alembic = "databricks_alembic.__main__:main"

[tool.poetry.group.dev.dependencies]
pytest-alembic = "^0.10.7"
databricks-sdk = "^0.19.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.dependencies]
python = ">=3.10, <3.12"
databricks-sql-connector = { version = "^3.0.0", extras = ["sqlalchemy"] }
zenodotus = { version = "^4", extras = ["typer", "aws", "sqlalchemy"] }
alembic = "^1.13.1"

[tool.poetry.dev-dependencies]
coverage = { version = "^6.1.1", extras = ["toml"] }
pytest = "6.2.5"
pytest-mock = "3.3.1"
pytest-asyncio = "0.14.0"
pytest-cov = "^2.10.1"
mypy = "^0.910"
aioresponses = "^0.7.2"
randomize = "^0.13"
requests-mock = "^1.9.3"
pre-commit = "^2.20.0"
psycopg2-binary = { version = "^2.9.2" }
rfh-datascience-libraries-hellflow = { version = "^0.0.5" }
ruff = "^0.1.11"


[[tool.poetry.source]]
name = "artifactory"                                                        # Ths name will be used in the configuration to retreive the proper credentials
url = "https://digitalgreenhouse.jfrog.io/artifactory/api/pypi/pypi/simple" # URL used to download your packages from

[tool.pytest.ini_options]
addopts = "--junitxml=junit/report.xml"
testpaths = ["tests"]
markers = "requires_database: requires postgresql"

[tool.coverage.report]
omit = ["tests/*", ".venv/*"]
precision = 2
show_missing = true

[tool.coverage.run]
omit = ["tests/*", ".venv/*"]
command_line = "-m pytest -v tests/"

[tool.ruff]
# https://beta.ruff.rs/docs/rules/
# https://beta.ruff.rs/docs/settings/
ignore = [
    "FBT003",
    "ANN101",
    "DTZ007",
    "TRY003",
    "A003",    # shadow built-in types
    "ANN002",  # type annotation for **kwargs
    "ANN003",  # type annotation for *args
    "ANN102",  # Missing type annotation for `cls` in classmethod
    "D101",    # docstring in public classes
    "D102",    # docstring in public methods
    "D103",    # docstring in public functions
    "DTZ",     # timezone information in datetimes
    "RUF012",  # causes failures in pydantic models
    "PLR0911", # for some reason can't ignore this on func definition
]
extend-select = [
    "I",
    "N",
    "ASYNC",
    "ANN",
    "BLE",
    "FBT",
    "A",
    "COM",
    "C4",
    "DTZ",
    "ISC",
    "ICN",
    "T20",
    "D101",
    "D102",
    "D103",
    "D419",
    "PT",
    "Q",
    "RSE",
    "RET",
    "SLF",
    "SLOT",
    "SIM",
    "TID252",
    "ARG",
    "ERA001",
    "PGH002",
    "PGH005",
    "PL",
    "TRY",
    "FLY",
    "NPY",
    "AIR",
    "PERF101",
    "PERF102",
    "RUF",
]
line-length = 120
target-version = "py39"
exclude = ["deploy", ".venv"]

[tool.ruff.per-file-ignores]
"tests/*" = [
    "ANN001",
    "ARG001",
    "D101",
    "D102",
    "D103",
    "D419",
    "DTZ005",
    "DTZ011",
    "PLR2004",
    "SLF001",
    "PLR0913",
    "PGH005",
]
"**/alembic/*" = ["D101", "D102", "D103", "D419", "I002"]

[tool.ruff.pylint]
max-args = 7

[tool.ruff.flake8-annotations]
suppress-none-returning = true
